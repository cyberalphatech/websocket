<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="C:\Users\Alex\AppData\Local\Temp\tmp4068.tmp.cadir\bin\App_Code.dll">
   <Modules>
    <Module Name="app_code.dll">
     <Namespaces>
      <Namespace Name="FKWeb">
       <Types>
        <Type Name="FKWebCmdTrans" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CheckResetCmd(System.Data.SqlClient.SqlConnection,System.String,System.String&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="667">In method 'FKWebCmdTrans.CheckResetCmd(SqlConnection, string, out string)', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSimpleCmd(System.Data.SqlClient.SqlConnection,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1378">In method 'FKWebCmdTrans.ExecuteSimpleCmd(SqlConnection, string)', object 'sqlCmd' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1378">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FKWebCmdTrans.ExecuteSimpleCmd(SqlConnection, string)' could contain the following variables 'asSql'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FPCONV_Convert(System.Int32,System.Byte[],System.Int32,System.Byte[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebCmdTrans.FPCONV_Convert(int, byte[], int, byte[])' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FPCONV_GetFpDataSize(System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebCmdTrans.FPCONV_GetFpDataSize(int, ref int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FPCONV_GetFpDataValidity(System.Byte[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebCmdTrans.FPCONV_GetFpDataValidity(byte[])' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FPCONV_GetFpDataVersionAndSize(System.Byte[],System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebCmdTrans.FPCONV_GetFpDataVersionAndSize(byte[], ref int, ref int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FPCONV_Init()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebCmdTrans.FPCONV_Init()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFKDataLibName(System.Data.SqlClient.SqlConnection,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1313">In method 'FKWebCmdTrans.GetFKDataLibName(SqlConnection, string)', object 'sqlCmd' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertRealtimeEnrollData(System.String,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="587">In method 'FKWebCmdTrans.InsertRealtimeEnrollData(string, string, byte[])', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="576">In method 'FKWebCmdTrans.InsertRealtimeEnrollData(string, string, byte[])', call System.IDisposable.Dispose on object 'sqlConn' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="600">Object 'sqlConn' can be disposed more than once in method 'FKWebCmdTrans.InsertRealtimeEnrollData(string, string, byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 600</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="587">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FKWebCmdTrans.InsertRealtimeEnrollData(string, string, byte[])' could contain the following variables 'FKWebTools.TimeToString(DateTime.Now)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertRealtimeGLog(System.String,System.String,System.String,System.String,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="520">In method 'FKWebCmdTrans.InsertRealtimeGLog(string, string, string, string, string, byte[])', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="509">In method 'FKWebCmdTrans.InsertRealtimeGLog(string, string, string, string, string, byte[])', call System.IDisposable.Dispose on object 'sqlConn' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="543">Object 'sqlConn' can be disposed more than once in method 'FKWebCmdTrans.InsertRealtimeGLog(string, string, string, string, string, byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 543, 547</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="520">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'FKWebCmdTrans.InsertRealtimeGLog(string, string, string, string, string, byte[])' could contain the following variables 'FKWebTools.TimeToString(DateTime.Now)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsCancelledCmd(System.Data.SqlClient.SqlConnection,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="721">In method 'FKWebCmdTrans.IsCancelledCmd(SqlConnection, string, string)', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsCmdCodeEqual(System.Data.SqlClient.SqlConnection,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1357">In method 'FKWebCmdTrans.IsCmdCodeEqual(SqlConnection, string, string)', object 'sqlCmd' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeUpdateFirmwareCmdParamBin(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.String,System.Byte[]&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="821">In method 'FKWebCmdTrans.MakeUpdateFirmwareCmdParamBin(SqlConnection, string, string, string, string, ref byte[])', object 'fs' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'fs' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReceiveCmd(System.String,System.String,System.String,System.String,System.String&amp;,System.String&amp;,System.String&amp;,System.Byte[]&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1166">In method 'FKWebCmdTrans.ReceiveCmd(string, string, string, string, out string, out string, out string, out byte[])', object 'sqlConn' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sqlConn' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1201">In method 'FKWebCmdTrans.ReceiveCmd(string, string, string, string, out string, out string, out string, out byte[])', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1174">Object 'sqlConn' can be disposed more than once in method 'FKWebCmdTrans.ReceiveCmd(string, string, string, string, out string, out string, out string, out byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1174, 1186, 1253, 1269, 1282, 1289</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveLogImageToFile(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="458">In method 'FKWebCmdTrans.SaveLogImageToFile(SqlConnection, string, string, string, byte[])', call System.IDisposable.Dispose on object 'fs' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCmdResult(System.String,System.String,System.String,System.Byte[],System.String&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1761">In method 'FKWebCmdTrans.SetCmdResult(string, string, string, byte[], out string)', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1723">In method 'FKWebCmdTrans.SetCmdResult(string, string, string, byte[], out string)', call System.IDisposable.Dispose on object 'sqlConn' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="1730">Object 'sqlConn' can be disposed more than once in method 'FKWebCmdTrans.SetCmdResult(string, string, string, byte[], out string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1730, 1749, 1757</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Test()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="362">In method 'FKWebCmdTrans.Test()', call System.IDisposable.Dispose on object 'conn' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="365">Object 'conn' can be disposed more than once in method 'FKWebCmdTrans.Test()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 365</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestStoredProcedureBinData()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="293">In method 'FKWebCmdTrans.TestStoredProcedureBinData()', call System.IDisposable.Dispose on object 'conn' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="298">In method 'FKWebCmdTrans.TestStoredProcedureBinData()', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="315">In method 'FKWebCmdTrans.TestStoredProcedureBinData()', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="346">Object 'conn' can be disposed more than once in method 'FKWebCmdTrans.TestStoredProcedureBinData()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 346</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateFKDeviceStatus(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src\App_Code" File="FKWebCmdTrans.cs" Line="630">In method 'FKWebCmdTrans.UpdateFKDeviceStatus(SqlConnection, string, string, string, string)', call System.IDisposable.Dispose on object 'sqlCmd' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FKWebTools" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OutputDebugString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FKWebTools.OutputDebugString(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'FKWebTools.OutputDebugString(string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'message' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
  <Target Name="C:\Users\Alex\AppData\Local\Temp\tmp4068.tmp.cadir\bin\App_Web_cgl4yjqn.dll">
   <Modules>
    <Module Name="app_web_cgl4yjqn.dll">
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="_Default" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnSendCmdResult(FKWeb.FKWebCmdTrans,System.String,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src" File="Default.aspx.cs" Line="307">In method '_Default.OnSendCmdResult(FKWebCmdTrans, string, string, byte[])', object 'sqlConn' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'sqlConn' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-11-02 10:14:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="f:\Web\2015-11-02BS\aspnet_src\fkwebserver_src" File="Default.aspx.cs" Line="317">Object 'sqlConn' can be disposed more than once in method '_Default.OnSendCmdResult(FKWebCmdTrans, string, string, byte[])'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 317, 334, 343, 348, 366, 367</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 317, 334, 343, 348, 366, 367</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="Parameter">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
